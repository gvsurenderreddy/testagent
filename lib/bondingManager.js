// Generated by CoffeeScript 1.9.3
(function() {
  var async, bondingManager, bondingSchema, createbonding, extend, keystore, testrunner, util, validate;

  util = require('util');

  extend = require('util')._extend;

  validate = require('json-schema').validate;

  keystore = require('mem-db');

  bondingSchema = require('./schema').bondingSchema;

  testrunner = require('./testRunner');

  async = require('async');

  createbonding = function(config, callback) {
    console.log("createbonding input data ", JSON.stringify(config));
    return async.series([
      (function(_this) {
        return function(callback) {
          var command;
          console.log("create bonding interface");
          command = "ip link add " + config.bondname + " type bond";
          return testrunner.runCommand(command, function(result) {
            console.log("Result ", result);
            if (result instanceof Error) {
              return callback(new Error('create bonding interface'));
            } else {
              return callback(null, "create bonding interface success");
            }
          });
        };
      })(this), (function(_this) {
        return function(callback) {
          console.log("attaching ethernet interfaces to bond interface");
          console.log(config.interfaces);
          return async.each(config.interfaces, function(ifname, callback) {
            var command;
            console.log("interface  " + ifname);
            command = "ip link set " + ifname + " down";
            return testrunner.runCommand(command, function(result) {
              if (result instanceof Error) {
                callback(result);
              }
              command = "ip link set " + ifname + " master " + config.bondname;
              return testrunner.runCommand(command, function(result) {
                console.log("Result ", result);
                if (result instanceof Error) {
                  return callback(result);
                } else {
                  return callback(null);
                }
              });
            });
          }, function(err) {
            if (err) {
              console.log("attaching ethernet interfaces - error occured " + JSON.stringify(err));
              return callback(err);
            } else {
              console.log("attaching ethernet interfaces - success ");
              return callback(null, "attaching ethernet interfaces - success");
            }
          });
        };
      })(this), (function(_this) {
        return function(callback) {
          var command;
          console.log("setting the ip address to the bond interface");
          command = "ip addr add " + config.ipaddress + "/24 dev " + config.bondname;
          return testrunner.runCommand(command, function(result) {
            console.log("Result", result);
            if (result instanceof Error) {
              return callback(new Error('setting the bond ip address failed'));
            } else {
              return callback(null, "setting the bond ip address - success");
            }
          });
        };
      })(this), (function(_this) {
        return function(callback) {
          var command;
          console.log("enabling the bond interface ");
          command = "ip link set " + config.bondname + " up";
          return testrunner.runCommand(command, function(result) {
            if (result instanceof Error) {
              return callback(new Error('enabling the bond interfae failed'));
            } else {
              return callback(null, "enabling the bondinterace- success");
            }
          });
        };
      })(this)
    ], (function(_this) {
      return function(err, result) {
        console.log("Bonding -  RUN result is  %s ", result);
        if (err) {
          return callback(false);
        }
        if (!err) {
          return callback(true);
        }
      };
    })(this));
  };

  bondingManager = (function() {
    function bondingManager() {
      this.registry = new keystore("bonding", bondingSchema);
      this.bondingobjs = {};
    }

    bondingManager.prototype.create = function(data, callback) {
      var id;
      id = this.registry.add(data);
      if (id instanceof Error || false) {
        return callback(new Error("invalid Schema"));
      }
      console.log("new bonding config created - id " + id);
      return createbonding(data, function(result) {
        if (result === true) {
          return callback({
            "id": id,
            "status": "created"
          });
        }
        if (result === false) {
          return callback({
            "id": id,
            "status": "failed"
          });
        }
      });
    };

    bondingManager.prototype.get = function(id, callback) {
      return callback(this.registry.get(id));
    };

    bondingManager.prototype.list = function(callback) {
      return callback(this.registry.list());
    };

    return bondingManager;

  })();

  module.exports = new bondingManager;

}).call(this);
