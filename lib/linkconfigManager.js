// Generated by CoffeeScript 1.9.3
(function() {
  var Linkconfig, LinkconfigData, LinkconfigManager, LinkconfigRegistry, StormData, StormRegistry, extend, netem, util, validate,
    extend1 = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  StormRegistry = require('stormregistry');

  StormData = require('stormdata');

  util = require('util');

  extend = require('util')._extend;

  validate = require('json-schema').validate;

  netem = require('./builder/iproute2driver');

  LinkconfigRegistry = (function(superClass) {
    extend1(LinkconfigRegistry, superClass);

    function LinkconfigRegistry(filename) {
      this.on('load', function(key, val) {
        var entry;
        entry = new LinkconfigData(key, val);
        if (entry != null) {
          entry.saved = true;
          return this.add(entry);
        }
      });
      this.on('removed', function(entry) {
        if (entry.destructor != null) {
          return entry.destructor();
        }
      });
      LinkconfigRegistry.__super__.constructor.call(this, filename);
    }

    LinkconfigRegistry.prototype.add = function(data) {
      var entry;
      if (!(data instanceof LinkconfigData)) {
        return;
      }
      return entry = LinkconfigRegistry.__super__.add.call(this, data.id, data);
    };

    LinkconfigRegistry.prototype.update = function(data) {
      return LinkconfigRegistry.__super__.update.call(this, data.id, data);
    };

    LinkconfigRegistry.prototype.get = function(key) {
      var entry;
      entry = LinkconfigRegistry.__super__.get.call(this, key);
      if (entry == null) {
        return;
      }
      if ((entry.data != null) && entry.data instanceof LinkconfigData) {
        entry.data.id = entry.id;
        return entry.data;
      } else {
        return entry;
      }
    };

    return LinkconfigRegistry;

  })(StormRegistry);

  LinkconfigData = (function(superClass) {
    var LinkconfigSchema;

    extend1(LinkconfigData, superClass);

    LinkconfigSchema = {
      name: "netem",
      type: "object",
      properties: {
        "interface": {
          "type": "string",
          "required": true
        },
        config: {
          type: "object",
          required: true,
          properties: {
            bandwidth: {
              "type": "string",
              "required": true
            },
            latency: {
              "type": "string",
              "required": true
            },
            jitter: {
              "type": "string",
              "required": true
            },
            pktloss: {
              "type": "string",
              "required": true
            }
          }
        }
      }
    };

    function LinkconfigData(id, data) {
      LinkconfigData.__super__.constructor.call(this, id, data, LinkconfigSchema);
    }

    return LinkconfigData;

  })(StormData);

  Linkconfig = (function() {
    function Linkconfig() {
      this.linkData = {};
    }

    Linkconfig.prototype.create = function(tdata) {
      this.linkData = extend({}, tdata.data);
      this.linkData.createdTime = new Date;
      this.uuid = tdata.id;
      util.log("Link Config created with " + JSON.stringify(this.linkData));
      netem.setLinkChars(this.linkData["interface"], this.linkData.config, (function(_this) {
        return function(result) {
          console.log("result is ", result);
          return _this.linkData.status = result;
        };
      })(this));
      return true;
    };

    Linkconfig.prototype.get = function() {
      return this.linkData;
    };

    Linkconfig.prototype.del = function() {
      return netem.delLink(this.linkData["interface"], (function(_this) {
        return function(result) {
          return console.log("link delete", result);
        };
      })(this));
    };

    return Linkconfig;

  })();

  LinkconfigManager = (function() {
    function LinkconfigManager() {
      this.registry = new LinkconfigRegistry;
      this.linkconfigobjs = {};
    }

    LinkconfigManager.prototype.create = function(data, callback) {
      var err, linkconfigdata, obj, result;
      try {
        linkconfigdata = new LinkconfigData(null, data);
      } catch (_error) {
        err = _error;
        console.log("linkconfigData - invalid schema " + JSON.stringify(err));
        return callback(new Error("Invalid Schema Input "));
      } finally {
        console.log("linkconfigData  created " + JSON.stringify(linkconfigdata));
      }
      obj = new Linkconfig;
      result = obj.create(linkconfigdata);
      if (result instanceof Error) {
        return callback(result);
      }
      this.linkconfigobjs[obj.uuid] = obj;
      return callback(this.registry.add(linkconfigdata));
    };

    LinkconfigManager.prototype.put = function(id, data, callback) {};

    LinkconfigManager.prototype.del = function(id, callback) {
      var obj, result;
      obj = this.linkconfigobjs[id];
      if (obj != null) {
        this.registry.remove(obj.uuid);
        result = obj.del();
        return callback(result);
      } else {
        return callback(new Error("Unknown linkobject ID"));
      }
    };

    LinkconfigManager.prototype.get = function(id, callback) {
      var obj;
      obj = this.linkconfigobjs[id];
      if (obj != null) {
        return callback(obj.get());
      } else {
        return callback(new Error("Unknown linkobject ID"));
      }
    };

    LinkconfigManager.prototype.list = function(callback) {
      return callback(this.registry.list());
    };

    return LinkconfigManager;

  })();

  module.exports = new LinkconfigManager;

}).call(this);
