// Generated by CoffeeScript 1.9.3
(function() {
  var LinkconfigManager, extend, keystore, linkconfigSchema, tcqdisc, util, validate;

  util = require('util');

  extend = require('util')._extend;

  validate = require('json-schema').validate;

  tcqdisc = require('linuxtcdriver');

  keystore = require('./keystore');

  linkconfigSchema = require('./schema').linkconfigSchema;

  LinkconfigManager = (function() {
    function LinkconfigManager() {
      this.registry = new keystore("LinkConfig", linkconfigSchema);
      this.linkconfigobjs = {};
    }

    LinkconfigManager.prototype.create = function(data, callback) {
      var id, tcobj;
      id = this.registry.add(data);
      if (id instanceof Error || false) {
        return callback(new Error("invalid Schema"));
      }
      console.log("new link config created - id " + id);
      tcobj = new tcqdisc(data["interface"], data.config);
      this.linkconfigobjs[id] = tcobj;
      tcobj.run(function(result) {});
      return callback({
        "id": id,
        "status": "created"
      });
    };

    LinkconfigManager.prototype.del = function(id, callback) {
      var obj;
      obj = this.linkconfigobjs[id];
      if (obj != null) {
        obj.del();
        this.registry.del(id);
        return callback({
          "id": id,
          "status": "deleted"
        });
      } else {
        return callback(new Error("Unknown linkobject ID"));
      }
    };

    LinkconfigManager.prototype.get = function(id, callback) {
      var obj;
      obj = this.linkconfigobjs[id];
      if (obj != null) {
        return callback(obj.get());
      } else {
        return callback(new Error("Unknown linkobject ID"));
      }
    };

    LinkconfigManager.prototype.statistics = function(id, callback) {
      var obj;
      obj = this.linkconfigobjs[id];
      if (obj != null) {
        return obj.statistics((function(_this) {
          return function(result) {
            return callback(result);
          };
        })(this));
      } else {
        return callback(new Error("Unknown linkobject ID"));
      }
    };

    LinkconfigManager.prototype.list = function(callback) {
      return callback(this.registry.list());
    };

    return LinkconfigManager;

  })();

  module.exports = new LinkconfigManager;

}).call(this);
