// Generated by CoffeeScript 1.9.3
(function() {
  var Ping, exec, util;

  util = require('util');

  exec = require('child_process').exec;

  Ping = (function() {
    function Ping() {}

    Ping.prototype.execute = function(command, callback) {
      if (command == null) {
        callback(false);
      }
      util.log("executing " + command + "...");
      return exec(command, (function(_this) {
        return function(error, stdout, stderr) {
          util.log("Ping - Error : " + error);
          util.log("Ping - stderr : " + stderr);
          if (error) {
            return callback(error);
          } else {
            return callback(stdout);
          }
        };
      })(this));
    };

    Ping.prototype.parseResult = function(data) {
      var output, result1, tmparr, tmpvars, tmpvars1;
      String(output = data.toString());
      tmparr = [];
      tmparr = output.split("\n");
      tmpvars = tmparr[3].split(/,/);
      console.log("line " + tmparr[4]);
      tmpvars1 = tmparr[4].split(/,/);
      console.log("line arrray " + tmpvars1);
      result1 = {
        transmitted: tmpvars[0],
        received: tmpvars[1],
        packetloss: tmpvars[2],
        totaltime: tmpvars[3],
        rtt_min: tmpvars1[0],
        rtt_max: tmpvars1[0],
        rtt_avg: tmpvars1[0],
        rtt_mdev: tmpvars1[0],
        ipg: tmpvars1[1],
        ewma: tmpvars1[1]
      };
      return result1;
    };

    Ping.prototype.runping = function(command, callback) {
      return this.execute(command, (function(_this) {
        return function(result) {
          var data;
          if (result instanceof Error) {
            return callback(result);
          }
          data = _this.parseResult(result);
          return callback(data);
        };
      })(this));
    };

    return Ping;

  })();

  module.exports = new Ping;

}).call(this);
