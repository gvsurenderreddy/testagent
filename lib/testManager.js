// Generated by CoffeeScript 1.9.3
(function() {
  var StormData, StormRegistry, Test, TestData, TestManager, TestRegistry, extend, iperftcpschema, iperfudpschema, pingschema, testrunner, util, validate,
    extend1 = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  StormRegistry = require('stormregistry');

  StormData = require('stormdata');

  util = require('util');

  extend = require('util')._extend;

  validate = require('json-schema').validate;

  testrunner = require('./testRunner');

  TestRegistry = (function(superClass) {
    extend1(TestRegistry, superClass);

    function TestRegistry(filename) {
      this.on('load', function(key, val) {
        var entry;
        entry = new TestData(key, val);
        if (entry != null) {
          entry.saved = true;
          return this.add(entry);
        }
      });
      this.on('removed', function(entry) {
        if (entry.destructor != null) {
          return entry.destructor();
        }
      });
      TestRegistry.__super__.constructor.call(this, filename);
    }

    TestRegistry.prototype.add = function(data) {
      var entry;
      if (!(data instanceof TestData)) {
        return;
      }
      return entry = TestRegistry.__super__.add.call(this, data.id, data);
    };

    TestRegistry.prototype.update = function(data) {
      return TestRegistry.__super__.update.call(this, data.id, data);
    };

    TestRegistry.prototype.get = function(key) {
      var entry;
      entry = TestRegistry.__super__.get.call(this, key);
      if (entry == null) {
        return;
      }
      if ((entry.data != null) && entry.data instanceof TestData) {
        entry.data.id = entry.id;
        return entry.data;
      } else {
        return entry;
      }
    };

    return TestRegistry;

  })(StormRegistry);

  TestData = (function(superClass) {
    var TestSchema;

    extend1(TestData, superClass);

    TestSchema = {
      name: "Test",
      type: "object",
      properties: {
        name: {
          type: "string",
          required: false
        },
        destination: {
          type: "string",
          required: true
        },
        type: {
          type: "string",
          required: true
        },
        duration: {
          type: "string",
          required: false
        },
        config: {
          type: "object",
          required: false
        }
      }
    };

    function TestData(id, data) {
      TestData.__super__.constructor.call(this, id, data, TestSchema);
    }

    return TestData;

  })(StormData);

  pingschema = {
    name: "ping",
    type: "object",
    required: true,
    properties: {
      adaptive: {
        "type": "string",
        "required": true
      },
      flood: {
        "type": "string",
        "required": true
      },
      count: {
        "type": "number",
        "required": true
      },
      packetsize: {
        "type": "number",
        "required": true
      },
      interval: {
        "type": "number",
        "required": false
      }
    }
  };

  iperftcpschema = {
    name: "iperftcp",
    type: "object",
    required: true,
    properties: {
      windowsize: {
        "type": "number",
        "required": false
      },
      packetsize: {
        "type": "number",
        "required": false
      },
      port: {
        "type": "number",
        "required": false
      }
    }
  };

  iperfudpschema = {
    name: "iperfudp",
    type: "object",
    required: true,
    properties: {
      bandwidth: {
        "type": "string",
        "required": false
      },
      packetsize: {
        "type": "number",
        "required": false
      },
      port: {
        "type": "number",
        "required": false
      }
    }
  };

  Test = (function() {
    function Test() {
      this.testData = {};
      this.testResult = [];
      util.log("New Test is created");
    }

    Test.prototype.CreateIperfTcpClient = function() {
      var Basecommand, flags;
      Basecommand = "iperf -c " + this.testData.destination + " -y C ";
      flags = " ";
      if (this.testData.config.windowsize != null) {
        flags += " -w " + this.testData.config.windowsize + " ";
      }
      if (this.testData.config.packetsize != null) {
        flags += " -l " + this.testData.config.packetsize + " ";
      }
      if (this.testData.config.port != null) {
        flags += " -p " + this.testData.config.port + " ";
      }
      if (this.testData.duration != null) {
        flags += " -t " + this.testData.duration + " ";
      } else {
        flags += " -t 60 ";
      }
      Basecommand += flags;
      this.command = Basecommand;
      return util.log("IPERF TCP CLIENT " + this.command);
    };

    Test.prototype.CreateIperfUdpClient = function() {
      var Basecommand, flags;
      Basecommand = "iperf -c " + this.testData.destination + " -u -y C ";
      flags = " ";
      if (this.testData.config.bandwitdh != null) {
        flags += " -b " + this.testData.config.bandwitdh + " ";
      }
      if (this.testData.config.packetsize != null) {
        flags += " -l " + this.testData.config.packetsize + " ";
      }
      if (this.testData.config.port != null) {
        flags += " -p " + this.testData.config.port + " ";
      }
      if (this.testData.duration != null) {
        flags += " -t " + this.testData.duration + " ";
      } else {
        flags += " -t 60 ";
      }
      Basecommand += flags;
      this.command = Basecommand;
      return util.log("IPERF UDP CLIENT " + this.command);
    };

    Test.prototype.CreatePingCommand = function() {
      var Basecommand, flags;
      Basecommand = "ping";
      if (this.testData.config.flood === "yes") {
        flags = "-f ";
      } else if (this.testData.config.adaptive === "yes") {
        flags = " -A ";
      } else {
        flags = " ";
      }
      if (this.testData.config.count != null) {
        flags += " -c " + this.testData.config.count;
      }
      if (this.testData.config.packetsize != null) {
        flags += " -s " + this.testData.config.packetsize;
      }
      flags += " -q ";
      this.command = Basecommand + flags + this.testData.destination;
      return console.log("ping comands is " + this.command);
    };

    Test.prototype.create = function(tdata) {
      var chk;
      this.testData = extend({}, tdata.data);
      this.testData.createdTime = new Date;
      this.uuid = tdata.id;
      util.log("Test created with " + JSON.stringify(this.testData));
      util.log(this.testData.type);
      switch (this.testData.type) {
        case "ping":
          chk = validate(this.testData.config, pingschema);
          console.log('pingSchema validate result ', chk);
          if (!chk.valid) {
            return new Error("ping schema check failed" + chk.valid);
          }
          this.CreatePingCommand();
          break;
        case "tcp":
          chk = validate(this.testData.config, iperftcpschema);
          console.log('iperftcpSchema validate result ', chk);
          if (!chk.valid) {
            return new Error("tcp schema check failed" + chk.valid);
          }
          this.CreateIperfTcpClient();
          break;
        case "udp":
          chk = validate(this.testData.config, iperfudpschema);
          console.log('iperfudpSchema validate result ', chk);
          if (!chk.valid) {
            return new Error("udp schema check failed" + chk.valid);
          }
          this.CreateIperfUdpClient();
      }
      return true;
    };

    Test.prototype.run = function() {
      this.testData.startedTime = new Date;
      this.testData.status = "started";
      switch (this.testData.type) {
        case "ping":
          return testrunner.runping(this.command, (function(_this) {
            return function(result) {
              console.log("ping result is " + result);
              _this.testData.testResult = result;
              _this.testData.status = "completed";
              return _this.testData.completedTime = new Date;
            };
          })(this));
        case "tcp":
          return testrunner.runtcp(this.command, (function(_this) {
            return function(result) {
              console.log("tcp result is " + result);
              _this.testData.testResult = result;
              _this.testData.status = "completed";
              return _this.testData.completedTime = new Date;
            };
          })(this));
        case "udp":
          return testrunner.runudp(this.command, (function(_this) {
            return function(result) {
              console.log("udp result is " + result);
              _this.testData.testResult = result;
              _this.testData.status = "completed";
              return _this.testData.completedTime = new Date;
            };
          })(this));
      }
    };

    Test.prototype.get = function() {
      return this.testData;
    };

    Test.prototype.del = function() {
      return true;
    };

    return Test;

  })();

  TestManager = (function() {
    function TestManager() {
      this.registry = new TestRegistry;
      this.testObjs = {};
    }

    TestManager.prototype.create = function(data, callback) {
      var err, result, testObj, testdata;
      try {
        testdata = new TestData(null, data);
      } catch (_error) {
        err = _error;
        console.log("TestData - invalid schema " + JSON.stringify(err));
        return callback(new Error("Invalid Schema Input "));
      } finally {
        console.log("TestData  created " + JSON.stringify(testdata));
      }
      testObj = new Test;
      result = testObj.create(testdata);
      if (result instanceof Error) {
        return callback(result);
      }
      this.testObjs[testObj.uuid] = testObj;
      testObj.run();
      return callback(this.registry.add(testdata));
    };

    TestManager.prototype.del = function(id, callback) {
      var obj, result;
      obj = this.testObjs[id];
      if (obj != null) {
        this.registry.remove(obj.uuid);
        result = obj.del();
        return callback(result);
      } else {
        return callback(new Error("Unknown Test ID"));
      }
    };

    TestManager.prototype.get = function(id, callback) {
      var obj;
      obj = this.testObjs[id];
      if (obj != null) {
        return callback(obj.get());
      } else {
        return callback(new Error("Unknown Test ID"));
      }
    };

    TestManager.prototype.list = function(callback) {
      return callback(this.registry.list());
    };

    return TestManager;

  })();

  module.exports = new TestManager;


  /*
  ping
  config = 
      destination:
      config :
          adpative: yes
          flood : yes
          count : 20
          packetsize : 1400
          interval : 23
  
  
  
  -c  <count>
  -A  adpative ping --- kind of flood
  -s  <package size>
  -f   flood ping 
  -q   quite mode -- only summary output    
  
  iperf udp client
  
  config =
      destination:
      duration : 300
      config:
          bandwitdh: 128kb
          packetsize: 1000
          port: 5001
  
  
  iperf tcp client
  
  config =
      destination:
      duration : 300
      config:
          windowsize: 100
          packetsize: 1000           
          port: 5001
   */

}).call(this);
