// Generated by CoffeeScript 1.9.3
(function() {
  var ParsePingResultPackets, ParsePingResultRTT, ParsePingResultTime, StormData, StormRegistry, Test, TestData, TestManager, TestRegistry, extend, iperftcpschema, iperfudpschema, parsePingResult, parseTCPResult, parseUDPResult, pingschema, testrunner, util, validate,
    extend1 = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  StormRegistry = require('stormregistry');

  StormData = require('stormdata');

  util = require('util');

  extend = require('util')._extend;

  validate = require('json-schema').validate;

  testrunner = require('./testRunner');

  pingschema = require('./schema').pingschema;

  iperftcpschema = require('./schema').iperftcpschema;

  iperfudpschema = require('./schema').iperfudpschema;

  ParsePingResultPackets = function(data) {
    var output, tmparr;
    String(output = data.toString());
    output = output.trim();
    tmparr = output.split(" ");
    return tmparr[0];
  };

  ParsePingResultTime = function(data) {
    var output, tmparr;
    String(output = data.toString());
    output = output.trim();
    tmparr = output.split(" ");
    return tmparr[1];
  };

  ParsePingResultRTT = function(data) {
    var output, tmparr, tmparr1;
    String(output = data.toString());
    output = output.trim();
    tmparr = output.split("=");
    tmparr1 = tmparr[1].split("/");
    return tmparr1;
  };

  parsePingResult = function(data) {
    var output, res, rtt, tmparr, tmpvars, tmpvars1;
    String(output = data.toString());
    tmparr = [];
    tmparr = output.split("\n");
    tmpvars = tmparr[3].split(/,/);
    tmpvars1 = tmparr[4].split(/,/);
    rtt = [];
    rtt = ParsePingResultRTT(tmpvars1[0]);
    res = {
      "transmitted": ParsePingResultPackets(tmpvars[0]),
      "received": ParsePingResultPackets(tmpvars[1]),
      "packetloss": ParsePingResultPackets(tmpvars[2]),
      "totaltime": ParsePingResultTime(tmpvars[3]),
      "rtt_min": rtt[0],
      "rtt_max": rtt[1],
      "rtt_avg": rtt[2]
    };
    return res;
  };

  parseTCPResult = function(data) {
    var BW, output, result, tmparr, transferredData;
    String(output = data.toString());
    tmparr = [];
    tmparr = output.split(",");
    console.log("tmparray", tmparr);
    transferredData = tmparr[7] / (1024 * 1024);
    transferredData += "MB";
    BW = tmparr[8] / (1000 * 1000);
    BW += "Mbps";
    result = {
      date: tmparr[0],
      senderip: tmparr[1],
      senderport: tmparr[2],
      receiverip: tmparr[3],
      receiverport: tmparr[4],
      iperf_test_id: tmparr[5],
      interval: tmparr[6],
      transfer: transferredData,
      bandwidth: BW
    };
    util.log("parseTCPResult output " + JSON.stringify(result));
    return result;
  };

  parseUDPResult = function(data) {
    var BW, output, reporteddata, result, senderdata, tmparr, transferredData;
    String(output = data.toString());
    tmparr = [];
    tmparr = output.split("\n");
    senderdata = tmparr[0].split(",");
    reporteddata = tmparr[1].split(",");
    transferredData = reporteddata[7] / (1024 * 1024);
    transferredData += "MB";
    BW = reporteddata[8] / (1000 * 1000);
    BW += "Mbps";
    result = {
      date: reporteddata[0],
      senderip: reporteddata[1],
      senderport: reporteddata[2],
      receivedip: reporteddata[3],
      receiverport: reporteddata[4],
      test_id: reporteddata[5],
      interval: reporteddata[6],
      transfer: transferredData,
      bandwidth: BW,
      jitter: reporteddata[9],
      lostdatagrams: reporteddata[10],
      totaldatagrams: reporteddata[11],
      unknown1: reporteddata[12],
      unknown2: reporteddata[13]
    };
    util.log("parseUDPResult output " + JSON.stringify(result));
    return result;
  };

  TestRegistry = (function(superClass) {
    extend1(TestRegistry, superClass);

    function TestRegistry(filename) {
      this.on('load', function(key, val) {
        var entry;
        entry = new TestData(key, val);
        if (entry != null) {
          entry.saved = true;
          return this.add(entry);
        }
      });
      this.on('removed', function(entry) {
        if (entry.destructor != null) {
          return entry.destructor();
        }
      });
      TestRegistry.__super__.constructor.call(this, filename);
    }

    TestRegistry.prototype.add = function(data) {
      var entry;
      if (!(data instanceof TestData)) {
        return;
      }
      return entry = TestRegistry.__super__.add.call(this, data.id, data);
    };

    TestRegistry.prototype.update = function(data) {
      return TestRegistry.__super__.update.call(this, data.id, data);
    };

    TestRegistry.prototype.get = function(key) {
      var entry;
      entry = TestRegistry.__super__.get.call(this, key);
      if (entry == null) {
        return;
      }
      if ((entry.data != null) && entry.data instanceof TestData) {
        entry.data.id = entry.id;
        return entry.data;
      } else {
        return entry;
      }
    };

    return TestRegistry;

  })(StormRegistry);

  TestData = (function(superClass) {
    var TestSchema;

    extend1(TestData, superClass);

    TestSchema = {
      name: "Test",
      type: "object",
      properties: {
        name: {
          type: "string",
          required: false
        },
        destination: {
          type: "string",
          required: true
        },
        type: {
          type: "string",
          required: true
        },
        duration: {
          type: "number",
          required: true
        },
        config: {
          type: "object",
          required: false
        }
      }
    };

    function TestData(id, data) {
      TestData.__super__.constructor.call(this, id, data, TestSchema);
    }

    return TestData;

  })(StormData);

  Test = (function() {
    function Test() {
      this.testData = {};
      this.testResult = [];
      util.log("New Test is created");
    }

    Test.prototype.CreateIperfTcpClient = function() {
      var Basecommand, flags;
      Basecommand = "iperf -c " + this.testData.destination + " -y C ";
      flags = " ";
      if (this.testData.config.windowsize != null) {
        flags += " -w " + this.testData.config.windowsize + " ";
      }
      if (this.testData.config.packetsize != null) {
        flags += " -l " + this.testData.config.packetsize + " ";
      }
      if (this.testData.config.port != null) {
        flags += " -p " + this.testData.config.port + " ";
      }
      if (this.testData.duration != null) {
        flags += " -t " + this.testData.duration + " ";
      } else {
        flags += " -t 60 ";
      }
      Basecommand += flags;
      this.command = Basecommand;
      return util.log("IPERF TCP CLIENT " + this.command);
    };

    Test.prototype.CreateIperfUdpClient = function() {
      var Basecommand, flags;
      Basecommand = "iperf -c " + this.testData.destination + " -u -y C ";
      flags = " ";
      if (this.testData.config.bandwitdh != null) {
        flags += " -b " + this.testData.config.bandwitdh + " ";
      }
      if (this.testData.config.packetsize != null) {
        flags += " -l " + this.testData.config.packetsize + " ";
      }
      if (this.testData.config.port != null) {
        flags += " -p " + this.testData.config.port + " ";
      }
      if (this.testData.duration != null) {
        flags += " -t " + this.testData.duration + " ";
      } else {
        flags += " -t 60 ";
      }
      Basecommand += flags;
      this.command = Basecommand;
      return util.log("IPERF UDP CLIENT " + this.command);
    };

    Test.prototype.CreatePingCommand = function() {
      var Basecommand, flags;
      Basecommand = "ping";
      flags = " ";
      if ((this.testData.config.flood != null) && this.testData.config.flood === "yes") {
        flags += "-f ";
      }
      if ((this.testData.config.adaptive != null) && this.testData.config.adaptive === "yes") {
        flags += "-A ";
      }
      if (this.testData.config.packetsize != null) {
        flags += " -s " + this.testData.config.packetsize;
      }
      if (this.testData.config.count != null) {
        flags += " -c " + this.testData.config.count;
      } else {
        flags += " -c " + this.testData.duration;
      }
      flags += " -q ";
      this.command = Basecommand + flags + this.testData.destination;
      return console.log("ping comands is " + this.command);
    };

    Test.prototype.create = function(tdata) {
      var chk;
      this.testData = extend({}, tdata.data);
      this.testData.createdTime = new Date;
      this.uuid = tdata.id;
      util.log("Test created with " + JSON.stringify(this.testData));
      util.log(this.testData.type);
      switch (this.testData.type) {
        case "ping":
          chk = validate(this.testData.config, pingschema);
          console.log('pingSchema validate result ', chk);
          if (!chk.valid) {
            return new Error("ping schema check failed" + chk.valid);
          }
          this.CreatePingCommand();
          break;
        case "tcp":
          chk = validate(this.testData.config, iperftcpschema);
          console.log('iperftcpSchema validate result ', chk);
          if (!chk.valid) {
            return new Error("tcp schema check failed" + chk.valid);
          }
          this.CreateIperfTcpClient();
          break;
        case "udp":
          chk = validate(this.testData.config, iperfudpschema);
          console.log('iperfudpSchema validate result ', chk);
          if (!chk.valid) {
            return new Error("udp schema check failed" + chk.valid);
          }
          this.CreateIperfUdpClient();
      }
      return true;
    };

    Test.prototype.parseResult = function(result) {
      var data;
      switch (this.testData.type) {
        case "ping":
          data = parsePingResult(result);
          break;
        case "tcp":
          data = parseTCPResult(result);
          break;
        case "udp":
          data = parseUDPResult(result);
      }
      return data;
    };

    Test.prototype.run = function() {
      this.testData.startedTime = new Date;
      this.testData.command = this.command;
      this.testData.status = "started";
      return testrunner.runCommand(this.command, (function(_this) {
        return function(result) {
          _this.testData.rawTestResult = result;
          _this.testData.completedTime = new Date;
          if (result instanceof Error) {
            return _this.testData.status = "Error";
          } else {
            _this.testData.status = "completed";
            return _this.testData.testResult = _this.parseResult(result);
          }
        };
      })(this));
    };

    Test.prototype.get = function() {
      return this.testData;
    };

    Test.prototype.del = function() {
      return true;
    };

    return Test;

  })();

  TestManager = (function() {
    function TestManager() {
      this.registry = new TestRegistry;
      this.testObjs = {};
    }

    TestManager.prototype.create = function(data, callback) {
      var err, result, testObj, testdata;
      try {
        testdata = new TestData(null, data);
      } catch (_error) {
        err = _error;
        console.log("TestData - invalid schema " + JSON.stringify(err));
        return callback(new Error("Invalid Schema Input "));
      } finally {
        console.log("TestData  created " + JSON.stringify(testdata));
      }
      testObj = new Test;
      result = testObj.create(testdata);
      if (result instanceof Error) {
        return callback(result);
      }
      this.testObjs[testObj.uuid] = testObj;
      testObj.run();
      return callback(this.registry.add(testdata));
    };

    TestManager.prototype.del = function(id, callback) {
      var obj, result;
      obj = this.testObjs[id];
      if (obj != null) {
        this.registry.remove(obj.uuid);
        result = obj.del();
        return callback(result);
      } else {
        return callback(new Error("Unknown Test ID"));
      }
    };

    TestManager.prototype.get = function(id, callback) {
      var obj;
      obj = this.testObjs[id];
      if (obj != null) {
        return callback(obj.get());
      } else {
        return callback(new Error("Unknown Test ID"));
      }
    };

    TestManager.prototype.list = function(callback) {
      return callback(this.registry.list());
    };

    return TestManager;

  })();

  module.exports = new TestManager;

}).call(this);
